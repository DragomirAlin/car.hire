openapi: 3.0.1
info:
  title: Car Hire API
  version: 0.1.0
  contact:
    name: Dragomir Alin
  description: Car Hire API
servers:
  - url: http://localhost:8080
    description: local environment
    variables:
      port:
        default: '8080'
tags:
  - name: user
    description: User resource endpoint
  - name: fleet
    description: Fleet management resource endpoint
  - name: rent
    description: Rent resource endpoint
paths:
  /user:
    get:
      tags:
        - user
      summary: get all users
      description: returns a list of all the users, without any filtering
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - user
      summary: add a new user
      description: adds a new user and returns it
      operationId: addUser
      requestBody:
        description: The data of the user to insert.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
            example:
              email: alin@carhire.com
              password: mypa$$w0rd!@$
              username: dragomiralin
              firstname: Dragomir
              title: Employee
              lastname: Alin
              countryofresidence: ROU
              driverlicensenumber: 221004
              status: ACTIVE
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/{id}:
    get:
      tags:
        - user
      summary: get user
      description: returns the details for a user, based on id
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - user
      summary: update user
      description: update user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/PatchBody'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: remove a user
      description: delete a user identified by id
      operationId: removeUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /fleet:
    get:
      tags:
        - fleet
      summary: get all cars details
      description: return a list of all cars details, without any filtering
      operationId: getCars
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - fleet
      summary: add a new car
      description: add a new car and returns it
      operationId: addCar
      requestBody:
        description: The data of the car to insert.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarDTO'
            example:
              make: test
              model: Dacia
              year: 2019
              mileage: 120031
              fuel: Diesel
              status: ACTIVE
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /fleet/status/{status}:
    get:
      tags:
        - fleet
      summary: get all cars details by status
      description: return a list of all cars details by cars, without any filtering
      operationId: getCarsByStatus
      parameters:
        - in: path
          name: status
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /fleet/{id}:
    get:
      tags:
        - fleet
      summary: get a fleet
      description: returns the details for an user, based on id
      operationId: getCar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - fleet
      summary: update car
      description: update car
      operationId: updateCar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/PatchBody'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - fleet
      summary: remove a car
      description: delete a car identified by id
      operationId: removeCar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /rental:
    get:
      tags:
        - rent
      summary: get all rentals details
      description: returns a list of all rentals, without any filtering
      operationId: getRentals
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - rent
      summary: add a new rental
      description: add a new rental and returns it
      operationId: addRental
      requestBody:
        description: The data of the rental to insert.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalDTO'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /rental/{id}:
    get:
      tags:
        - rent
      summary: get a rental
      description: return the details for a rental, based on id
      operationId: getRental
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - rent
      summary: update rental
      description: update rental
      operationId: updateRental
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/PatchBody'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - rent
      summary: remove a rental
      description: delete a rental identified by id
      operationId: cancelRental
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    Created:
      description: created with success
      content:
        application/json:
          schema:
            type: string
            properties:
              id:
                type: string
                example: 12fc2
    NotFound:
      description: not found
    Unauthorized:
      description: unauthorized
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'

  requestBodies:
    PatchBody:
      description: A message in JsonPatch format
      required: true
      content:
        application/json-patch+json:
          schema:
            $ref: '#/components/schemas/PatchBody'

  schemas:
    PatchBody:
      type: array
      items:
        $ref: '#/components/schemas/PatchDocument'

    PatchDocument:
      type: object
      description: A JSONPatch document as defined by RFC 6902.
      required:
        - 'op'
        - 'path'
        - 'value'
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - 'add'
            - 'remove'
            - 'replace'
            - 'move'
            - 'copy'
            - 'test'
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.

    ValidationDTO:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        description:
          type: string
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    UserDefaultObject:
      type: object
      properties:
        email:
          type: string
          description: email of the user
        username:
          type: string
          description: username of the user
        firstname:
          type: string
          description: first name of the user
        lastname:
          type: string
          description: last name of the user
        countryofresidence:
          type: string
          description: country of residence of the user
        title:
          type: string
          description: title of the user
        driverlicensenumber:
          type: integer
          format: int32
          description: driver`s license number of the user
        status:
          type: string
          enum: [ ACTIVE, CANCELLED ]
          description: the status of the user

    UserResponseDTO:
      allOf:
        - $ref: '#/components/schemas/UserDefaultObject'
        - type: object
          properties:
            id:
              type: integer
              format: int32
              description: id of the user

    UserDTO:
      allOf:
        - $ref: '#/components/schemas/UserDefaultObject'
        - type: object
          properties:
            password:
              type: string
              format: password
              description: password of the user

    CarDTO:
      type: object
      properties:
        make:
          type: string
          description: make param
        model:
          type: string
          description: model of the car
        year:
          type: integer
          format: int32
          description: year of manufacture of the car
        mileage:
          type: integer
          format: int32
          description: car mileage
        fuel:
          type: string
          description: type of fuel
        carClazz:
          type: string
        status:
          type: string
          enum: [ACTIVE, CANCELLED]
          description: the status of the car

    CarResponseDTO:
      allOf:
        - $ref: '#/components/schemas/CarDTO'
        - type: object
          properties:
            id:
              type: string
              description: id car


    RentalDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: rent id
        user:
          type: integer
          format: int32
          description: user id
        car:
          type: integer
          format: int32
          description: car id
        startRent:
          type: string
          format: date-time
          description: start date and time
          example: "2020-11-14T12:30:00Z"
        endRent:
          format: date-time
          description: end date and time
          example: "2020-11-19T12:30:00Z"
        status:
          type: string
          enum: [ACTIVE, CANCELLED]
          description: the status of the rental